name: Build

on:
  workflow_dispatch:
    inputs:
      publish-release:
        description: 'Publish Release'
        type: boolean
        default: false
      publish-pre-release:
        description: 'Publish as Pre-Release'
        type: boolean
        default: false
      version-number:
        description: 'Version Number for Release'
        type: string
      release-name-info:
        description: 'Additional info to put at the end of the release name'
        type: string
        required: false
      release-notes:
        description: 'Release notes, auto generated if not given'
        type: string
        required: false

jobs:
  build-linux-x64:
    defaults:
      run:
        shell: bash

    runs-on: ubuntu-22.04

    steps:
      - name: Checkout latest
        uses: actions/checkout@v5
        with:
          submodules: 'recursive'

      - name: Install dependencies
        run: |
          dotnet tool install -g vpk

      - name: Run publish script
        run: |
          cd src/VRCFaceTracking.Desktop/Publish
          python publish_linux.py

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: VRCFaceTracking.AppImage
          path: src/VRCFaceTracking.Desktop/installers/linux-x64/VRCFaceTracking.AppImage

  build-windows-x64:
    defaults:
      run:
        shell: bash

    runs-on: windows-2022

    steps:
      - name: Checkout latest
        uses: actions/checkout@v5
        with:
          submodules: 'recursive'
          lfs: true

      - name: Build project
        run: |
          cd src/VRCFaceTracking.Desktop
          dotnet publish -r win-x64 -c Release --self-contained -f net8.0

      - name: Run makensis
        run: |
          cd src/VRCFaceTracking.Desktop
          "C:\Program Files (x86)\NSIS\makensis.exe" main.nsi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: "VRCFaceTracking Setup.exe"
          path: "src/VRCFaceTracking.Desktop/VRCFaceTracking Setup.exe"

  publish-release:
    #needs: [build-linux-x64, build-windows-x64]
    #for now, releases only include windows
    needs: build-windows-x64
    if: ${{ github.event.inputs.publish-release == 'true' }}
    defaults:
      run:
        shell: bash

    runs-on: ubuntu-22.04

    steps:
      - name: Validate version number exists
        run: |
          if [ -z "${{ github.event.inputs.version-number }}" ]; then
            exit 1
          fi

      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: "VRCFaceTracking Setup.exe"
          path: ./artifacts

      #- name: Download Linux artifact
      #  uses: actions/download-artifact@v4
      #  with:
      #    name: VRCFaceTracking.AppImage
      #    path: ./artifacts

      - name: Rename artifacts
        env:
          VERSION: ${{ github.event.inputs.version-number }}
        run: |
          cd artifacts
          mv "VRCFaceTracking Setup.exe" "VRCFaceTracking.Setup.${VERSION}.exe"
      #    mv "VRCFaceTracking.AppImage" "VRCFaceTracking.${VERSION}.AppImage"

      - name: Set dynamic release name
        id: release-name
        run: |
          if [[ -z "${{ github.event.inputs.release-name-info }}" ]]; then
            echo "name=${{ github.event.inputs.version-number }}" >> "$GITHUB_OUTPUT"
          else
            echo "name=${{ github.event.inputs.version-number }} - ${{ github.event.inputs.release-name-info }}" >> "$GITHUB_OUTPUT"
          fi

      - name: Set release body or generate notes
        id: release-body
        run: |
          if [[ -z "${{ github.event.inputs.release-notes }}" ]]; then
            echo "generate_notes=true" >> "$GITHUB_OUTPUT"
            echo "body=" >> "$GITHUB_OUTPUT"
          else
            echo "generate_notes=false" >> "$GITHUB_OUTPUT"
            echo "body<<EOF" >> "$GITHUB_OUTPUT"
            echo "${{ github.event.inputs.release-notes }}" >> "$GITHUB_OUTPUT"
            echo "EOF" >> "$GITHUB_OUTPUT"
          fi

      - name: Publish release
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/VRCFaceTracking.Setup.${{ github.event.inputs.version-number }}.exe
          tag_name: ${{ github.event.inputs.version-number }}
          name: ${{ steps.release-name.outputs.name }}
          prerelease: ${{ github.event.inputs.publish-pre-release }}
          body: ${{ steps.release-body.outputs.body }}
          generate_release_notes: ${{ steps.release-body.outputs.generate_notes }}

          #files: |
          #  artifacts/VRCFaceTracking.Setup.${{ github.event.inputs.versionNumber }}.exe
          #  artifacts/VRCFaceTracking.${{ github.event.inputs.versionNumber }}.AppImage
